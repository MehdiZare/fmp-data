name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13.0-alpha.5"]
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      id: setup-python
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true
        cache: 'pip'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.4
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Display Python & Poetry version
      run: |
        python --version
        poetry --version

    - name: Load cached venv
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        poetry env use python${{ matrix.python-version }}
        poetry install --no-interaction --with dev

    - name: List environment info
      run: |
        python --version
        pip --version
        poetry --version
        poetry show
        poetry env info

    - name: Run tests
      env:
        FMP_API_KEY: ${{ secrets.FMP_API_KEY }}
      run: |
        poetry run pytest tests/ \
          --cov=fmp_data \
          --cov-config=.coveragerc \
          --cov-report=xml \
          --cov-report=term \
          --cov-report=html \
          -v

    - name: Upload coverage
      if: runner.os == 'Linux' && matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage report
      if: runner.os == 'Linux' && matrix.python-version == '3.12'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage_html/
        if-no-files-found: error
