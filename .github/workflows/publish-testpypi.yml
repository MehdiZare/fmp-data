name: Publish-to-TestPyPI

on:
  # Trigger on PRs from dev to main with release labels
  pull_request:
    types: [opened, synchronize, labeled]
    branches:
      - main
  # Also trigger on pre-release tags
  push:
    tags:
      - 'v*.*.*rc*'            # Release candidates (v1.2.3rc1)
      - 'v*.*.*a*'             # Alpha releases (v1.2.3a1)
      - 'v*.*.*b*'             # Beta releases (v1.2.3b1)
      - 'v*.*.*dev*'           # Dev releases (v1.2.3dev1)

permissions:
  id-token: write              # OIDC ‚Üí Trusted Publishing
  pull-requests: write
  contents: write

jobs:
  test-release-build:
    # Only run for PRs from dev with release labels
    if: |
      github.event_name == 'pull_request' &&
      github.event.pull_request.head.ref == 'dev' &&
      (contains(github.event.pull_request.labels.*.name, 'release:major') ||
       contains(github.event.pull_request.labels.*.name, 'release:minor') ||
       contains(github.event.pull_request.labels.*.name, 'release:patch'))

    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: "3.12"

    steps:
      - name: üõéÔ∏è  Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for version calculation
          ref: ${{ github.event.pull_request.head.sha }}

      - name: üêç  Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ‚ö°  Install uv (with cache)
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: üì¶  Install build tools
        run: |
          uv pip install --system build hatch

      - name: üè∑Ô∏è  Calculate and create test version tag
        id: version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CURRENT_VERSION=${LATEST_TAG#v}

          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Determine version bump type from labels
          if [[ "${{ contains(github.event.pull_request.labels.*.name, 'release:major') }}" == "true" ]]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'release:minor') }}" == "true" ]]; then
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
          else
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
          fi

          # Add dev suffix with PR number for TestPyPI
          TEST_VERSION="${NEW_VERSION}.dev${{ github.event.pull_request.number }}"
          TEST_TAG="v${TEST_VERSION}"

          echo "TEST_VERSION=$TEST_VERSION" >> $GITHUB_OUTPUT
          echo "TEST_TAG=$TEST_TAG" >> $GITHUB_OUTPUT
          echo "üì¶ Test version: $TEST_VERSION"

          # Create a temporary tag for hatch-vcs to pick up
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a "$TEST_TAG" -m "Test release $TEST_TAG"

      - name: üì¶  Build wheel & sdist
        run: |
          python -m build --wheel --sdist
          echo "üì¶ Build completed. Contents of dist/:"
          ls -la dist/

      - name: üß™  Upload to Test PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist
          skip-existing: true
          verbose: true
          print-hash: true

      - name: üìù  Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.version.outputs.TEST_VERSION }}';
            const comment = `## üß™ Test Release Published

            A test version has been published to TestPyPI for verification.

            **Version:** \`${version}\`

            ### Installation
            \`\`\`bash
            pip install -i https://test.pypi.org/simple/ fmp-data==${version}
            \`\`\`

            ### Verification Steps
            1. Install the test package using the command above
            2. Verify the package imports correctly
            3. Test key functionality
            4. Check that all dependencies are resolved

            ‚úÖ Once verified, merge this PR to trigger the actual release to PyPI.`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Test Release Published')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment,
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment,
              });
            }

  # Original job for tag-based releases
  publish-prerelease:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: "3.12"

    steps:
      - name: üõéÔ∏è  Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for hatch-vcs versioning

      - name: üêç  Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ‚ö°  Install uv (with cache)
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: üì¶  Build wheel & sdist
        run: |
          uv pip install --system build hatch
          python -m build --wheel --sdist

      - name: üöÄ  Upload to Test PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist
          skip-existing: true
