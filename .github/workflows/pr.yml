# .github/workflows/pr.yml
name: Pull Request

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Check required labels
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.pull_request.labels.map(l => l.name);
            const versionLabels = ['patch', 'minor', 'major', 'skip-release'];
            const hasVersionLabel = versionLabels.some(label => labels.includes(label));

            if (!hasVersionLabel) {
              core.setFailed(`PR must have one of these labels: ${versionLabels.join(', ')}`);
            }

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.8.4"
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.12-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with dev

      - name: Run code quality checks
        run: |
          poetry run black . --check --diff
          poetry run isort . --check --diff
          poetry run ruff check .
          poetry run mypy .
          poetry run bandit -r fmp_data

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.8.4"
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with dev

      - name: Run tests
        env:
          FMP_TEST_API_KEY: ${{ secrets.FMP_TEST_API_KEY }}
        run: |
          poetry run pytest \
            --cov=fmp_data \
            --cov-report=xml \
            --cov-report=term \
            -v

      - name: Upload coverage
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    name: Test Build
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: "1.8.4"
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Add dynamic versioning plugin
        run: poetry self add poetry-dynamic-versioning

      - name: Test package build
        run: |
          poetry build
          echo "Package built successfully"
          ls -la dist/
