name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

env:
  DEFAULT_EXTRAS: "langchain mcp-server dev"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      # ── Checkout ──────────────────────────────────────────────────────────
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ── CPython toolchain ────────────────────────────────────────────────
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # ── uv installer + cache ─────────────────────────────────────────────
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.local/share/uv
          key: ${{ runner.os }}-py${{ matrix.python-version }}-uv-${{ hashFiles('**/pyproject.toml', 'uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-uv-

      # ── Project dependencies via uv --------------------------------------
      - name: Install dependencies (uv)
        run: |
          uv --version
          # expand DEFAULT_EXTRAS into repeated --group flags
          uv sync $(for g in $DEFAULT_EXTRAS; do printf ' --group %s' "$g"; done)

      # ── nox orchestration -------------------------------------------------
      - name: Install nox
        run: uv tool install nox

      # ── Tests -------------------------------------------------------------
      - name: Run tests (nox)
        env:
          NOX_USE_UV: "1"
        run: |
          # Run the parameterised *tests* session on the current Python only
          nox -p ${{ matrix.python-version }} -s tests

      # ── Quality-gate sessions (run once on 3.12) -------------------------
      - name: Run QA sessions (lint + typecheck + security)
        if: matrix.python-version == '3.12'
        env:
          NOX_USE_UV: "1"
        run: |
          nox -s lint typecheck security

      # ── Coverage artefacts -----------------------------------------------
      - name: Upload coverage (matrix)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}-${{ github.run_id }}
          path: |
            coverage.xml
            htmlcov
          retention-days: 7
        continue-on-error: true

  build:
    needs: test          # Build wheel + sdist once tests & QA pass
    runs-on: ubuntu-latest

    steps:
      # ── Checkout ---------------------------------------------------------
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ── CPython toolchain ------------------------------------------------
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # ── uv + cache -------------------------------------------------------
      - name: Install uv + build deps
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      # ── Install project for build ----------------------------------------
      - name: Install project (uv)
        run: uv sync --group dev

      # ── Build wheel & sdist ---------------------------------------------
      - name: Build distribution
        run: |
          uv run python -m build --wheel --sdist
          uv run twine check dist/*
