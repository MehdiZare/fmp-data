name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

env:
  DEFAULT_EXTRAS: "langchain mcp-server dev"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      # Checkout ----------------------------------------------------------------
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # CPython toolchain --------------------------------------------------------
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # uv installer + cache -----------------------------------------------------
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Cache uv wheels
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.local/share/uv
          key: ${{ runner.os }}-py${{ matrix.python-version }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-uv-

      # Install deps (runtime + extras) -----------------------------------------
      - name: Install dependencies (uv)
        run: |
          uv --version
          uv sync $(for g in $DEFAULT_EXTRAS; do printf ' --group %s' "$g"; done)

      # nox orchestration --------------------------------------------------------
      - name: Install nox
        run: uv tool install nox

      # Run sessions -------------------------------------------------------------
      - name: Run sessions
        env:
          NOX_USE_UV: "1"
        run: |
          if [[ "${{ matrix.python-version }}" == "3.13" ]]; then
            nox -p 3.13 -s smoke          # import-only test
          else
            nox -p ${{ matrix.python-version }} -s tests
            if [[ "${{ matrix.python-version }}" == "3.12" ]]; then
              nox -s lint typecheck security
            fi
          fi

      # Upload coverage (only where pytest ran) ---------------------------------
      - name: Upload coverage
        if: always() && contains('3.10 3.11 3.12', matrix.python-version)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}-${{ github.run_id }}
          path: |
            coverage.xml
            htmlcov
          retention-days: 7
        continue-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      # Checkout ----------------------------------------------------------------
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # CPython 3.12 -------------------------------------------------------------
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # uv + cache ---------------------------------------------------------------
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Cache uv wheels
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.local/share/uv
          key: build-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            build-uv-

      # Install build tooling ----------------------------------------------------
      - name: Install project (uv)
        run: uv sync --group dev

      # Build distribution -------------------------------------------------------
      - name: Build wheel & sdist
        run: |
          uv run python -m build --wheel --sdist
          uv run twine check dist/*
