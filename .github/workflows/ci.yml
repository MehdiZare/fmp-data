name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  qa:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup all Python versions for nox matrix testing
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      # Install uv for faster dependency management (optional)
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
        continue-on-error: true

      # Cache dependencies based on Poetry lock file
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
            ~/.cache/uv
            ~/.local/share/uv
          key: ${{ runner.os }}-deps-${{ hashFiles('**/poetry.lock', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ hashFiles('**/pyproject.toml') }}
            ${{ runner.os }}-deps-

      - name: Install toolchain
        run: |
          # Install Poetry and Nox
          python -m pip install --upgrade pip
          pip install "poetry>=1.8" nox

          # Check if uv is available and working
          if command -v uv &> /dev/null; then
            echo "‚úÖ uv is available"
            uv --version

            # Try to sync from Poetry's pyproject.toml
            # This creates a virtual environment and installs dependencies
            if uv sync --extra dev --extra langchain --extra mcp-server; then
              echo "‚úÖ uv sync successful"
              # Install nox in the uv environment
              uv add --dev nox
              echo "UV_AVAILABLE=true" >> $GITHUB_ENV
            else
              echo "‚ö†Ô∏è uv sync failed, falling back to Poetry"
              poetry install --with dev --extras "langchain mcp-server"
              echo "UV_AVAILABLE=false" >> $GITHUB_ENV
            fi
          else
            echo "‚ö†Ô∏è uv not available, using Poetry"
            poetry install --with dev --extras "langchain mcp-server"
            echo "UV_AVAILABLE=false" >> $GITHUB_ENV
          fi

      - name: Run quality checks
        run: |
          if [[ "$UV_AVAILABLE" == "true" ]]; then
            echo "üöÄ Running with uv"
            NOX_USE_UV=1 uv run nox -s tests lint typecheck typecheck_lang security
          else
            echo "üêç Running with Poetry"
            poetry run nox -s tests lint typecheck typecheck_lang security
          fi

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/
          retention-days: 7
        continue-on-error: true
