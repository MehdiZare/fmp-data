name: Publish-to-PyPI

on:
  workflow_run:
    workflows:
      - Test-Matrix
    branches:
      - main                   # fire only for merges to main
    types:
      - completed
  workflow_dispatch:            # allow manual triggering
    inputs:
      confirm:
        description: 'Type "publish" to confirm you want to publish to PyPI'
        required: true
        default: ''

permissions:
  id-token: write
  contents: write              # allow creating GitHub releases

jobs:
  build-and-publish:
    # Auto-trigger: only if tests passed
    # Manual trigger: only if user confirmed with "publish"
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.confirm == 'publish')
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: "3.12"

    steps:
      - name: 🛎️  Checkout code
        uses: actions/checkout@v4
        with:
          # Use the tested commit for auto-trigger, current HEAD for manual
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.sha }}

      - name: 📋  Show trigger info
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "🤖 Auto-triggered after successful tests on main branch"
            echo "📍 Using tested commit: ${{ github.event.workflow_run.head_sha }}"
          else
            echo "👤 Manually triggered"
            echo "📍 Using commit: ${{ github.sha }}"
            echo "⚠️  Make sure you're on the main branch with the correct version!"
          fi

      - name: 🔒  Safety check for manual runs
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [ "${{ github.ref_name }}" != "main" ]; then
            echo "❌ Manual publishing is only allowed from the main branch"
            echo "Current branch: ${{ github.ref_name }}"
            exit 1
          fi
          echo "✅ Running on main branch"

      - name: 🐍  Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ⚡  Install uv (with cache)
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: 🏷️  Get package version
        id: get_version
        run: |
          # Install package to get version (system interpreter)
          uv pip install --system -e .
          version=$(python -c "import fmp_data; print(fmp_data.__version__)")
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "📦 Package version: $version"

      - name: 📦  Build wheel & sdist
        run: |
          echo "📦 Installing build with uv (system interpreter)…"
          uv pip install --system build

          echo "📦 Building distributions…"
          python -m build --wheel --sdist --verbose

          echo "📦 Artifacts:"
          ls -la dist/

      - name: 🚀  Upload to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          packages-dir: dist
          skip-existing: false

      - name: 📝  Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          generate_release_notes: true
          make_latest: true
