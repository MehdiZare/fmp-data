name: Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PYTHON_VERSION: "3.12"

jobs:
  # ══════════════════════════════════════════════════════════════════════════
  # Production Release Jobs (Push to main only)
  # ══════════════════════════════════════════════════════════════════════════

  guard-label:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      bump: ${{ steps.bump.outputs.bump }}
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Derive bump from PR label
        id: bump
        run: |
          set -euo pipefail
          pr_json="$(gh api "repos/${{ github.repository }}/commits/${GITHUB_SHA}/pulls" || true)"
          pr="$(jq -r '.[0].number // empty' <<<"$pr_json")"

          if [[ -z "$pr" ]]; then
            echo "::error::Commit ${GITHUB_SHA} is not part of a merged PR."
            exit 1
          fi

          labels="$(gh pr view "$pr" --json labels --jq '.labels[].name')"
          bump=""
          [[ "$labels" == *"release:patch"* ]] && bump="patch"
          [[ "$labels" == *"release:minor"* ]] && bump="minor"
          [[ "$labels" == *"release:major"* ]] && bump="major"

          echo "bump=$bump" >> "$GITHUB_OUTPUT"

          if [[ -z "$bump" || "$(grep -c 'release:' <<<"$labels")" -ne 1 ]]; then
            echo "::error::Exactly one release:* label required (found: $labels)"
            exit 1
          fi

          echo "✅ Release bump: $bump"

  tag-version:
    if: github.event_name == 'push'
    needs: guard-label
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.tag.outputs.new_tag }}
      new_version: ${{ steps.tag.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Create and push tag
        id: tag
        env:
          BUMP: ${{ needs.guard-label.outputs.bump }}
        run: |
          set -euo pipefail
          latest=$(git describe --tags --abbrev=0 2>/dev/null || echo v0.0.0)
          IFS='.' read -r major minor patch <<<"${latest#v}"

          case "$BUMP" in
            patch) patch=$((patch+1));;
            minor) minor=$((minor+1)); patch=0;;
            major) major=$((major+1)); minor=0; patch=0;;
          esac

          new_tag="v${major}.${minor}.${patch}"
          new_version="${major}.${minor}.${patch}"

          echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"
          echo "new_version=$new_version" >> "$GITHUB_OUTPUT"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$new_tag"
          git push origin "$new_tag"

          echo "✅ Created and pushed tag: $new_tag"

  # ══════════════════════════════════════════════════════════════════════════
  # Build Job (Runs for both PRs and pushes)
  # ══════════════════════════════════════════════════════════════════════════

  build:
    runs-on: ubuntu-latest
    needs: [tag-version]
    if: always() && (github.event_name == 'pull_request' || needs.tag-version.result == 'success')
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      wheel_file: ${{ steps.extract-version.outputs.wheel_file }}
      sdist_file: ${{ steps.extract-version.outputs.sdist_file }}
      is_development: ${{ steps.extract-version.outputs.is_development }}
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'push' && needs.tag-version.outputs.new_tag || '' }}

      - uses: actions/setup-python@v5.6.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.local/share/uv
          key: ${{ runner.os }}-build-${{ hashFiles('**/pyproject.toml', 'uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Setup toolchain and dependencies
        run: |
          echo "🚀 Installing with uv"
          uv --version

          # Install core toolchain using uvx (uv tool run)
          uvx poetry --version || uv tool install poetry
          uvx poetry self add poetry-dynamic-versioning[plugin]

          # Install project with all optional features and dev dependencies
          uv sync --group langchain --group mcp-server --group dev

      - name: Verify dynamic versioning
        run: |
          echo "📋 Build Information"
          echo "  Event: ${{ github.event_name }}"
          echo "  Commit: $(git rev-parse --short HEAD)"
          echo "  Branch: $(git branch --show-current || echo 'detached')"
          echo "  Latest tag: $(git describe --tags --abbrev=0 2>/dev/null || echo 'none')"
          echo "  Git describe: $(git describe --tags --always)"
          echo ""

          version=$(uvx poetry version --short)
          echo "📦 Version: $version"

          # Validate version
          if [[ "$version" == "0.0.0" ]]; then
            echo "::error::Dynamic versioning failed - still showing 0.0.0"
            exit 1
          fi

          # Check version type
          if [[ "$version" == *.post* ]]; then
            echo "📝 Development version detected"
            if [[ "${{ github.event_name }}" == "push" ]]; then
              echo "::error::Production release cannot use development version: $version"
              exit 1
            fi
          else
            echo "🎯 Clean release version detected"
          fi

      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests"
          NOX_USE_UV=1 uv run nox -s smoke

      - name: Build package
        run: |
          echo "📦 Building package"
          uvx poetry build

      - name: Extract package metadata
        id: extract-version
        run: |
          wheel_file=$(ls dist/*.whl | head -1)
          sdist_file=$(ls dist/*.tar.gz | head -1)

          # Validate files exist
          [[ -n "$wheel_file" ]] || { echo "::error::No wheel file found"; exit 1; }
          [[ -n "$sdist_file" ]] || { echo "::error::No sdist file found"; exit 1; }

          # Extract version using poetry (simpler approach)
          version=$(uvx poetry version --short)

          [[ -n "$version" ]] || { echo "::error::Failed to extract version"; exit 1; }

          # Determine if development version
          is_development="false"
          [[ "$version" == *.post* ]] && is_development="true"

          # Set outputs
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "wheel_file=$(basename "$wheel_file")" >> "$GITHUB_OUTPUT"
          echo "sdist_file=$(basename "$sdist_file")" >> "$GITHUB_OUTPUT"
          echo "is_development=$is_development" >> "$GITHUB_OUTPUT"

          # Create summary
          {
            echo "## 📦 Package Build Summary"
            echo "| Item | Value |"
            echo "|------|-------|"
            echo "| **Version** | \`$version\` |"
            echo "| **Type** | $([ "$is_development" = "true" ] && echo "Development 🔄" || echo "Release 🎯") |"
            echo "| **Wheel** | \`$(basename "$wheel_file")\` |"
            echo "| **Sdist** | \`$(basename "$sdist_file")\` |"
            echo "| **Tool** | uv + poetry |"
            echo "| **Event** | ${{ github.event_name }} |"
          } >> $GITHUB_STEP_SUMMARY

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: dist-${{ github.run_id }}
          path: dist/*
          retention-days: 7

  # ══════════════════════════════════════════════════════════════════════════
  # Test Publishing (PRs only)
  # ══════════════════════════════════════════════════════════════════════════

  test-publish:
    if: github.event_name == 'pull_request' && needs.build.result == 'success'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4.3.0
        with:
          name: dist-${{ github.run_id }}
          path: dist

      - uses: actions/setup-python@v5.6.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Verify artifacts
        run: |
          echo "📁 Artifact contents:"
          ls -la dist/
          echo ""
          echo "📋 Files to upload:"
          find dist/ -name "*.whl" -o -name "*.tar.gz" | sort

      - name: Upload to Test PyPI
        env:
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          if [[ -z "$TWINE_PASSWORD" ]]; then
            echo "::error::TEST_PYPI_TOKEN secret is not configured"
            echo "Please add TEST_PYPI_TOKEN to your repository secrets"
            exit 1
          fi

          echo "🚀 Uploading to Test PyPI"
          echo "  Version: ${{ needs.build.outputs.version }}"
          echo "  Wheel: ${{ needs.build.outputs.wheel_file }}"
          echo "  Sdist: ${{ needs.build.outputs.sdist_file }}"
          echo ""

          uvx twine upload \
            --non-interactive \
            --skip-existing \
            --repository-url https://test.pypi.org/legacy/ \
            -u __token__ \
            -p "$TWINE_PASSWORD" \
            dist/*

          test_pypi_url="https://test.pypi.org/project/fmp-data/${{ needs.build.outputs.version }}/"
          echo ""
          echo "✅ Successfully uploaded to Test PyPI"
          echo "🔗 View at: $test_pypi_url"

          # Add to summary
          {
            echo "## 🧪 Test PyPI Upload"
            echo "Successfully uploaded version \`${{ needs.build.outputs.version }}\`"
            echo ""
            echo "🔗 [View on Test PyPI]($test_pypi_url)"
            echo ""
            echo "### Test Installation"
            echo "\`\`\`bash"
            echo "pip install --index-url https://test.pypi.org/simple/ fmp-data==${{ needs.build.outputs.version }}"
            echo "\`\`\`"
          } >> $GITHUB_STEP_SUMMARY

  # ══════════════════════════════════════════════════════════════════════════
  # Production Publishing (Push to main only)
  # ══════════════════════════════════════════════════════════════════════════

  publish:
    if: github.event_name == 'push'
    needs: [tag-version, build]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4.3.0
        with:
          name: dist-${{ github.run_id }}
          path: dist

      - uses: actions/setup-python@v5.6.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Upload to PyPI
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          echo "🚀 Uploading to Production PyPI"
          echo "  Tag: ${{ needs.tag-version.outputs.new_tag }}"
          echo "  Version: ${{ needs.build.outputs.version }}"
          echo "  Wheel: ${{ needs.build.outputs.wheel_file }}"
          echo "  Sdist: ${{ needs.build.outputs.sdist_file }}"
          echo ""

          # Validate version consistency
          if [[ "${{ needs.tag-version.outputs.new_version }}" != "${{ needs.build.outputs.version }}" ]]; then
            echo "::warning::Version mismatch - Tag: ${{ needs.tag-version.outputs.new_version }}, Package: ${{ needs.build.outputs.version }}"
          fi

          uvx twine upload \
            --non-interactive \
            --skip-existing \
            -u __token__ \
            -p "$TWINE_PASSWORD" \
            dist/*

          pypi_url="https://pypi.org/project/fmp-data/${{ needs.build.outputs.version }}/"
          echo ""
          echo "✅ Successfully published to PyPI"
          echo "🔗 View at: $pypi_url"

          # Add to summary
          {
            echo "## 🎉 PyPI Release"
            echo "Successfully released version \`${{ needs.build.outputs.version }}\`"
            echo ""
            echo "🔗 [View on PyPI]($pypi_url)"
            echo ""
            echo "### Installation"
            echo "\`\`\`bash"
            echo "pip install fmp-data==${{ needs.build.outputs.version }}"
            echo "\`\`\`"
          } >> $GITHUB_STEP_SUMMARY

  # ══════════════════════════════════════════════════════════════════════════
  # GitHub Release Creation (Production only)
  # ══════════════════════════════════════════════════════════════════════════

  create-release:
    if: github.event_name == 'push'
    needs: [tag-version, build, publish]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          ref: ${{ needs.tag-version.outputs.new_tag }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.tag-version.outputs.new_tag }}
          name: Release ${{ needs.tag-version.outputs.new_tag }}
          generate_release_notes: true
          body: |
            ## 📦 Package Information

            - **Version:** `${{ needs.build.outputs.version }}`
            - **Wheel:** `${{ needs.build.outputs.wheel_file }}`
            - **Sdist:** `${{ needs.build.outputs.sdist_file }}`

            ## 🚀 Installation

            ```bash
            pip install fmp-data==${{ needs.build.outputs.version }}

            # With optional features (using uv)
            uv add fmp-data[langchain]
            uv add fmp-data[mcp-server]
            ```

            ## 🔗 Links

            - [📦 PyPI Package](https://pypi.org/project/fmp-data/${{ needs.build.outputs.version }}/)
            - [📚 Documentation](https://mehdizare.github.io/fmp-data/)
            - [📋 Source Code](https://github.com/MehdiZare/fmp-data/tree/${{ needs.tag-version.outputs.new_tag }})
            - [🐛 Issues](https://github.com/MehdiZare/fmp-data/issues)

            ## 🎯 What's Changed

            ${{ github.event.head_commit.message }}
