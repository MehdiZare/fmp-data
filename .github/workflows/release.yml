name: Release

on:
  push:
    branches: [main]           # real release
  pull_request:
    branches: [main]           # dry-run to TestPyPI
  workflow_dispatch:           # manual trigger

permissions:
  contents: write
  pages: write
  id-token: write

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # gh CLI auth

jobs:
# ───────────────────────────────────────────────────────────────
# 1. Label guard – only when we’re *really* releasing
# ───────────────────────────────────────────────────────────────
  guard-label:
    if: github.event_name == 'push'
    name: Verify release label
    runs-on: ubuntu-latest
    outputs:
      bump: ${{ steps.set.outputs.bump }}

    steps:
      - uses: actions/checkout@v4
        with: {fetch-depth: 0}

      - id: set
        name: Determine bump from PR label
        run: |
          set -eu
          sha=${GITHUB_SHA}
          # Ask for PRs associated with this commit (may be empty)
          pr_number=$(gh api \
            "repos/${{ github.repository }}/commits/$sha/pulls" \
            --jq '.[0].number // empty')   # List-PRs-for-commit API :contentReference[oaicite:4]{index=4}
          if [[ -z "$pr_number" ]]; then
            echo "No PR found for commit $sha – skipping label check."
            echo "bump=" >>"$GITHUB_OUTPUT"
            exit 0
          fi

          labels=$(gh pr view "$pr_number" --json labels \
                    --jq '.labels[].name')
          bump=""
          [[ $labels == *"release:patch"* ]] && bump="patch"
          [[ $labels == *"release:minor"* ]] && bump="minor"
          [[ $labels == *"release:major"* ]] && bump="major"
          echo "bump=$bump" >>"$GITHUB_OUTPUT"

          cnt=$(echo "$labels" | grep -c 'release:')
          if [[ -z "$bump" || $cnt -ne 1 ]]; then
            echo "::error::Exactly one label release:* is required."
            exit 1
          fi

# ───────────────────────────────────────────────────────────────
# 2. Tag version – only on real release
# ───────────────────────────────────────────────────────────────
  tag-version:
    needs: guard-label
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.tag.outputs.new_tag }}

    steps:
      - uses: actions/checkout@v4
        with: {fetch-depth: 0}

      - id: tag
        name: Bump version and create tag
        env:
          BUMP: ${{ needs.guard-label.outputs.bump }}
        run: |
          set -eu
          latest=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          IFS='.' read -r major minor patch <<<"${latest#v}"
          case "$BUMP" in
            patch) patch=$((patch+1));;
            minor) minor=$((minor+1)); patch=0;;
            major) major=$((major+1)); minor=0; patch=0;;
            "")    echo "No bump required – exiting."; exit 0;;
          esac
          new_tag="v${major}.${minor}.${patch}"
          echo "new_tag=$new_tag" >>"$GITHUB_OUTPUT"

          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$new_tag"
          git push origin "$new_tag"

# ───────────────────────────────────────────────────────────────
# 3A. Full publish to PyPI + Docs + GitHub Release (push → main)
# ───────────────────────────────────────────────────────────────
  publish:
    needs: tag-version
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.tag-version.outputs.new_tag }}

      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - run: python -m pip install --upgrade pip uv nox

      - uses: snok/install-poetry@v1
        with: { virtualenvs-create: false }

      - run: poetry self add poetry-dynamic-versioning    # dynamic version from tag

      - name: Smoke tests
        run: nox -s smoke

      - name: Build & upload to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry build
          python -m twine upload \
            --non-interactive --skip-existing \
            -u __token__ -p "$PYPI_TOKEN" dist/*

      # ─── Docs ──────────────────────────────────────────
      - name: Build MkDocs
        run: nox -s docs

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with: { path: site }

      - name: Deploy GitHub Pages
        uses: actions/deploy-pages@v4

      # ─── Draft GitHub Release ─────────────────────────
      - name: Draft release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.tag-version.outputs.new_tag }}
          name: Release ${{ needs.tag-version.outputs.new_tag }}

# ───────────────────────────────────────────────────────────────
# 3B. DRY-RUN path → TestPyPI for every PR to main
# ───────────────────────────────────────────────────────────────
  test-release:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - run: python -m pip install --upgrade pip uv nox

      - uses: snok/install-poetry@v1
        with: { virtualenvs-create: false }

      - run: poetry self add poetry-dynamic-versioning

      - name: Smoke tests
        run: nox -s smoke

      - name: Build & upload to **TestPyPI**
        env:
          TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          poetry build
          python -m twine upload \
            --non-interactive --skip-existing \
            --repository-url https://test.pypi.org/legacy/ \
            -u __token__ -p "$TEST_PYPI_TOKEN" dist/*
