# .github/workflows/release.yml
name: Release and PyPI

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  determine-version:
    name: Determine Version Bump
    runs-on: ubuntu-latest
    outputs:
      version_type: ${{ steps.version.outputs.type }}
      should_release: ${{ steps.version.outputs.should_release }}
      pr_number: ${{ steps.pr.outputs.number }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR number
        id: pr
        if: github.event_name == 'push'
        run: |
          PR_NUMBER=$(gh pr list --state merged --base main --limit 1 --json number --jq '.[0].number')
          echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get PR labels
        id: labels
        if: github.event_name == 'push' && steps.pr.outputs.number
        run: |
          LABELS=$(gh pr view ${{ steps.pr.outputs.number }} --json labels --jq '.labels[].name' | tr '\n' ',' | sed 's/,$//')
          echo "labels=$LABELS" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version type
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            SHOULD_RELEASE="true"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            LABELS="${{ steps.labels.outputs.labels }}"
            if [[ "$LABELS" == *"release:major"* ]]; then
              VERSION_TYPE="major"
              SHOULD_RELEASE="true"
            elif [[ "$LABELS" == *"release:minor"* ]]; then
              VERSION_TYPE="minor"
              SHOULD_RELEASE="true"
            elif [[ "$LABELS" == *"release:patch"* ]]; then
              VERSION_TYPE="patch"
              SHOULD_RELEASE="true"
            elif [[ "$LABELS" == *"no-release"* ]]; then
              VERSION_TYPE=""
              SHOULD_RELEASE="false"
            else
              # Default to patch for any merged PR without explicit labels
              VERSION_TYPE="patch"
              SHOULD_RELEASE="true"
            fi
          else
            VERSION_TYPE=""
            SHOULD_RELEASE="false"
          fi

          echo "type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "Determined version type: $VERSION_TYPE, should release: $SHOULD_RELEASE"

  test-before-release:
    name: Full Test Suite
    runs-on: ubuntu-latest
    needs: determine-version
    if: needs.determine-version.outputs.should_release == 'true'

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install --no-interaction --with dev,langchain

      - name: Run full test suite
        run: |
          poetry run pytest \
            --cov=fmp_data \
            --cov-report=xml \
            --cov-report=term-missing \
            -v

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ determine-version, test-before-release ]
    if: needs.determine-version.outputs.should_release == 'true'
    outputs:
      version: ${{ steps.tag.outputs.version }}
      tag: ${{ steps.tag.outputs.tag }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        id: current
        run: |
          CURRENT_VERSION=$(poetry version -s)
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump
        run: |
          poetry version ${{ needs.determine-version.outputs.version_type }}
          NEW_VERSION=$(poetry version -s)
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tag
        id: tag
        run: |
          NEW_TAG="v${{ steps.bump.outputs.version }}"
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "version=${{ steps.bump.outputs.version }}" >> $GITHUB_OUTPUT

          git add pyproject.toml
          git commit -m "Bump version to ${{ steps.bump.outputs.version }}"
          git tag $NEW_TAG
          git push origin main
          git push origin $NEW_TAG

  publish-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release.outputs.tag }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Configure Poetry for TestPyPI
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry config pypi-token.testpypi ${{ secrets.TEST_PYPI_TOKEN }}

      - name: Build and publish to TestPyPI
        run: |
          poetry build
          poetry publish -r testpypi --skip-existing

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [ create-release, publish-testpypi ]
    environment: production

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release.outputs.tag }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Configure Poetry for PyPI
        run: poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}

      - name: Build and publish to PyPI
        run: |
          poetry build
          poetry publish

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [ create-release, publish-pypi ]
    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release.outputs.tag }}

      - name: Generate changelog
        id: changelog
        run: |
          if [[ "${{ needs.determine-version.outputs.pr_number }}" != "" ]]; then
            CHANGELOG="## What's Changed\n\nMerged PR #${{ needs.determine-version.outputs.pr_number }}\n\n### Changes\n- Automatic release via semantic versioning\n- Version bump: ${{ needs.determine-version.outputs.version_type }}"
          else
            CHANGELOG="## What's Changed\n\n### Changes\n- Manual release\n- Version bump: ${{ needs.determine-version.outputs.version_type }}"
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.tag }}
          name: Release ${{ needs.create-release.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          generate_release_notes: true
          make_latest: true
