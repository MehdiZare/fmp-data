name: Release

on:
  push:
    branches:
      - main            # after PR is merged → real PyPI
  pull_request:
    branches:
      - main            # PRs targeting main → Test PyPI
  workflow_dispatch:     # manual trigger

permissions:
  contents: write        # tag + create release
  pages:    write        # deploy GitHub Pages
  id-token: write        # OIDC (future trusted PyPI)

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # ── 1. Derive bump from PR label (only on push) ──────────────────────────
  guard-label:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      bump: ${{ steps.bump.outputs.bump }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine bump from PR label
        id: bump
        run: |
          sha=$GITHUB_SHA
          pr_number=$(gh api \
            "repos/${{ github.repository }}/commits/$sha/pulls" \
            --jq '.[0].number')
          labels=$(gh pr view "$pr_number" --json labels --jq '.labels[].name')
          bump=""
          [[ $labels == *"release:patch"* ]] && bump=patch
          [[ $labels == *"release:minor"* ]] && bump=minor
          [[ $labels == *"release:major"* ]] && bump=major
          echo "bump=$bump" >> "$GITHUB_OUTPUT"
          [[ -z $bump || $(echo "$labels" | grep -c 'release:') -ne 1 ]] && \
            (echo "::error::Exactly one label release:* is required." && exit 1)

  # ── 2. Tag version (only on push) ────────────────────────────────────────
  tag-version:
    if: github.event_name == 'push'
    needs: guard-label
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.tag.outputs.new_tag }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Bump version and push tag
        id: tag
        env:
          BUMP: ${{ needs.guard-label.outputs.bump }}
        run: |
          latest=$(git describe --tags --abbrev=0 2>/dev/null || echo v0.0.0)
          ver=${latest#v}; IFS='.' read -r major minor patch <<<"$ver"
          case "$BUMP" in
            patch) patch=$((patch+1));;
            minor) minor=$((minor+1)); patch=0;;
            major) major=$((major+1)); minor=0; patch=0;;
          esac
          new_tag="v${major}.${minor}.${patch}"
          echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"
          git config user.name  github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          git tag "$new_tag"
          git push origin "$new_tag"

  # ── 3. Build & test once (shared) ───────────────────────────────────────
  build-wheel:
    name: Build & Test
    runs-on: ubuntu-latest
    outputs:
      dist_path: dist
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # push → new tag; PR → HEAD
          ref: ${{ github.event_name == 'push' && needs.tag-version.outputs.new_tag || '' }}

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install base tool-chain
        run: python -m pip install --upgrade pip uv nox twine

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false

      - run: poetry self add poetry-dynamic-versioning

      - name: Smoke tests
        run: nox -s smoke

      - name: Build wheel & sdist
        run: poetry build

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-dist
          path: dist/*

  # ── 4a. Dry-run → Test PyPI (for PRs) ───────────────────────────────────
  publish-testpypi:
    if: github.event_name == 'pull_request'
    needs: build-wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: python-dist
          path: dist

      - name: Upload to Test PyPI
        env:
          TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          python -m twine upload \
            --non-interactive \
            --repository-url https://test.pypi.org/legacy/ \
            --skip-existing \
            -u __token__ -p "$TEST_PYPI_TOKEN" dist/*

  # ── 4b. Real release → PyPI + docs + GH release (push) ──────────────────
  publish:
    if: github.event_name == 'push'
    needs:
      - tag-version
      - build-wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: python-dist
          path: dist

      - name: Upload to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m twine upload \
            --non-interactive \
            --skip-existing \
            -u __token__ -p "$PYPI_TOKEN" dist/*

      # ── Docs ────────────────────────────────────────────────────────────
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.tag-version.outputs.new_tag }}

      - run: python -m pip install --upgrade pip nox

      - name: Build MkDocs
        run: nox -s docs

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

      # ── Draft GitHub Release ────────────────────────────────────────────
      - name: Draft GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.tag-version.outputs.new_tag }}
          name: Release ${{ needs.tag-version.outputs.new_tag }}
