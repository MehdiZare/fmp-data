name: Release

on:
  push:
    branches: [main]          # real release to PyPI
  pull_request:
    branches: [main]          # dry-run → Test PyPI
  workflow_dispatch:

permissions:
  contents: write             # tag / create release
  pages: write                # deploy GitHub Pages
  id-token: write             # OIDC (future trusted PyPI)

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

###############################################################################
# 1) VERIFY LABEL & CHOOSE BUMP  –- runs only on push→main
###############################################################################
jobs:
  guard-label:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      bump: ${{ steps.bump.outputs.bump }}

    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Derive bump from PR label
        id: bump
        shell: bash
        run: |
          set -euo pipefail
          pr_json="$(gh api "repos/${{ github.repository }}/commits/${GITHUB_SHA}/pulls" || true)"
          pr="$(jq -r '.[0].number // empty' <<<"$pr_json")"
          if [[ -z "$pr" ]]; then
            echo "::error::Commit ${GITHUB_SHA} is not part of a merged PR."
            exit 1
          fi
          labels="$(gh pr view "$pr" --json labels --jq '.labels[].name')"

          bump=""
          [[ "$labels" == *"release:patch"* ]] && bump="patch"
          [[ "$labels" == *"release:minor"* ]] && bump="minor"
          [[ "$labels" == *"release:major"* ]] && bump="major"
          echo "bump=$bump" >>"$GITHUB_OUTPUT"

          if [[ -z "$bump" || "$(grep -c 'release:' <<<"$labels")" -ne 1 ]]; then
            echo "::error::Exactly one release:* label required."
            exit 1
          fi

###############################################################################
# 2) TAG NEW VERSION  (push only)
###############################################################################
  tag-version:
    if: github.event_name == 'push'
    needs: guard-label
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.tag.outputs.new_tag }}
      new_version: ${{ steps.tag.outputs.new_version }}

    steps:
      - uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0

      - name: Create and push tag
        id: tag
        env:
          BUMP: ${{ needs.guard-label.outputs.bump }}
        shell: bash
        run: |
          set -euo pipefail
          latest=$(git describe --tags --abbrev=0 2>/dev/null || echo v0.0.0)
          IFS='.' read -r major minor patch <<<"${latest#v}"
          case "$BUMP" in
            patch) patch=$((patch+1));;
            minor) minor=$((minor+1)); patch=0;;
            major) major=$((major+1)); minor=0; patch=0;;
          esac
          new_tag="v${major}.${minor}.${patch}"
          new_version="${major}.${minor}.${patch}"

          echo "🏷️  Creating new tag: $new_tag"
          echo "📦 New version will be: $new_version"

          echo "new_tag=$new_tag" >>"$GITHUB_OUTPUT"
          echo "new_version=$new_version" >>"$GITHUB_OUTPUT"

          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$new_tag"
          git push origin "$new_tag"

###############################################################################
# 3) COMMON BUILD (wheel + sdist + smoke test)
###############################################################################
  build:
    runs-on: ubuntu-latest
    outputs:
      dist_dir: dist
      package_version: ${{ steps.extract-version.outputs.version }}
      wheel_file: ${{ steps.extract-version.outputs.wheel_file }}
      sdist_file: ${{ steps.extract-version.outputs.sdist_file }}
    steps:
      - uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0
          ref: "${{ github.event_name == 'push' && needs.tag-version.outputs.new_tag || '' }}"

      - uses: actions/setup-python@v5.6.0
        with:
          python-version: "3.12"

      - name: Base toolchain
        run: python -m pip install --upgrade pip poetry nox build

      - name: Install dependencies
        run: |
          poetry install --with dev
          # Install poetry-dynamic-versioning plugin
          poetry self add poetry-dynamic-versioning[plugin]

      - name: 🔍 Verify dynamic versioning
        run: |
          echo "::group::📋 Version Information"
          echo "🌳 Git information:"
          echo "  Current commit: $(git rev-parse --short HEAD)"
          echo "  Current branch: $(git branch --show-current)"
          echo "  Latest tag: $(git describe --tags --abbrev=0 2>/dev/null || echo 'No tags found')"
          echo "  Git describe: $(git describe --tags --always)"
          echo ""
          echo "📦 Poetry version detection:"
          poetry_version=$(poetry version --short)
          echo "  Poetry sees version: $poetry_version"
          echo ""
          echo "🐍 Python package version:"
          python -c "
          try:
              import fmp_data
              print(f'  Package __version__: {fmp_data.__version__}')
          except:
              print('  Package not yet built/installed')
          " || true
          echo "::endgroup::"

          # Fail if still seeing 0.0.0
          if [[ "$poetry_version" == "0.0.0" ]]; then
            echo "::error::❌ Dynamic versioning failed - still seeing 0.0.0"
            echo "Check that poetry-dynamic-versioning is configured correctly"
            exit 1
          fi

      - name: Smoke tests
        run: nox -s smoke

      - name: 🔨 Build wheel & sdist
        run: |
          echo "::group::📦 Building Package"
          poetry build
          echo "::endgroup::"

      - name: 📊 Extract version from built package
        id: extract-version
        run: |
          echo "::group::📋 Built Package Information"
          echo "📁 Contents of dist/ directory:"
          ls -la dist/
          echo ""

          # Extract version from wheel filename
          wheel_file=$(ls dist/*.whl | head -1)
          sdist_file=$(ls dist/*.tar.gz | head -1)

          if [[ -n "$wheel_file" ]]; then
            # Extract version from filename: fmp_data-1.2.3-py3-none-any.whl
            version=$(basename "$wheel_file" | sed 's/fmp_data-\(.*\)-py3.*/\1/')
            echo "🎯 Extracted version from wheel: $version"
            echo "🌟 Wheel file: $(basename "$wheel_file")"
            echo "📦 Sdist file: $(basename "$sdist_file")"
          else
            echo "::error::❌ No wheel file found in dist/"
            exit 1
          fi

          # Set outputs for later jobs
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "wheel_file=$(basename "$wheel_file")" >> "$GITHUB_OUTPUT"
          echo "sdist_file=$(basename "$sdist_file")" >> "$GITHUB_OUTPUT"
          echo "::endgroup::"

          # Create a summary
          echo "## 📦 Package Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | \`$version\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Wheel** | \`$(basename "$wheel_file")\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Sdist** | \`$(basename "$sdist_file")\` |" >> $GITHUB_STEP_SUMMARY

      - name: Upload dist as artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: dist
          path: dist/*

###############################################################################
# 4a) DRY-RUN → Test PyPI  (pull-request path)
###############################################################################
  test-publish:
    if: github.event_name == 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4.3.0
        with:
          name: dist
          path: dist

      - uses: actions/setup-python@v5.6.0
        with:
          python-version: "3.12"

      - run: python -m pip install --upgrade twine

      - name: 🚀 Upload to Test PyPI
        env:
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          echo "::group::🧪 Test PyPI Upload"
          echo "📦 Uploading version: ${{ needs.build.outputs.package_version }}"
          echo "🎯 Wheel: ${{ needs.build.outputs.wheel_file }}"
          echo "📄 Sdist: ${{ needs.build.outputs.sdist_file }}"
          echo "🌐 Repository: https://test.pypi.org/legacy/"
          echo ""

          python -m twine upload --non-interactive --skip-existing \
            --repository-url https://test.pypi.org/legacy/ \
            -u __token__ -p "$TWINE_PASSWORD" dist/*

          echo ""
          echo "✅ Successfully uploaded to Test PyPI!"
          echo "🔗 Check at: https://test.pypi.org/project/fmp-data/${{ needs.build.outputs.package_version }}/"
          echo "::endgroup::"

          # Add to job summary
          echo "## 🧪 Test PyPI Upload" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Success!** Uploaded version \`${{ needs.build.outputs.package_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **View on Test PyPI:** https://test.pypi.org/project/fmp-data/${{ needs.build.outputs.package_version }}/" >> $GITHUB_STEP_SUMMARY

###############################################################################
# 4b) REAL RELEASE → PyPI + docs + GH release  (push path)
###############################################################################
  publish:
    if: github.event_name == 'push'
    needs: [tag-version, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - run: python -m pip install --upgrade twine

      - name: 🚀 Upload to PyPI
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          echo "::group::🚀 PyPI Release Upload"
          echo "🏷️  Git tag: ${{ needs.tag-version.outputs.new_tag }}"
          echo "📦 Package version: ${{ needs.build.outputs.package_version }}"
          echo "🎯 Wheel: ${{ needs.build.outputs.wheel_file }}"
          echo "📄 Sdist: ${{ needs.build.outputs.sdist_file }}"
          echo "🌐 Repository: https://upload.pypi.org/legacy/"
          echo ""

          # Verify tag matches package version
          if [[ "${{ needs.tag-version.outputs.new_version }}" != "${{ needs.build.outputs.package_version }}" ]]; then
            echo "::warning::⚠️  Tag version (${{ needs.tag-version.outputs.new_version }}) doesn't match package version (${{ needs.build.outputs.package_version }})"
          fi

          python -m twine upload --non-interactive --skip-existing \
            -u __token__ -p "$TWINE_PASSWORD" dist/*

          echo ""
          echo "✅ Successfully released to PyPI!"
          echo "🔗 Check at: https://pypi.org/project/fmp-data/${{ needs.build.outputs.package_version }}/"
          echo "::endgroup::"

          # Add to job summary
          echo "## 🚀 PyPI Release" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Success!** Released version \`${{ needs.build.outputs.package_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **View on PyPI:** https://pypi.org/project/fmp-data/${{ needs.build.outputs.package_version }}/" >> $GITHUB_STEP_SUMMARY

      # ─── Build & deploy docs ──────────────────────────────────────────
      - uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0
          ref: ${{ needs.tag-version.outputs.new_tag }}

      - run: |
          python -m pip install --upgrade nox
          nox -s docs

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa
        with:
          path: site

      - uses: actions/deploy-pages@v4.0.5

      # ─── Draft GitHub release page ───────────────────────────────────
      - uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8
        with:
          tag_name: ${{ needs.tag-version.outputs.new_tag }}
          name: Release ${{ needs.tag-version.outputs.new_tag }}
          body: |
            ## 📦 Package Information

            - **Version:** `${{ needs.build.outputs.package_version }}`
            - **Wheel:** `${{ needs.build.outputs.wheel_file }}`
            - **Sdist:** `${{ needs.build.outputs.sdist_file }}`

            ## 🔗 Links

            - [PyPI Package](https://pypi.org/project/fmp-data/${{ needs.build.outputs.package_version }}/)
            - [Documentation](https://github.com/MehdiZare/fmp-data#readme)
            - [Source Code](https://github.com/MehdiZare/fmp-data/tree/${{ needs.tag-version.outputs.new_tag }})
