name: Release

on:
  push:
    branches: [ main ]        # real release
  pull_request:
    branches: [ main ]        # dry-run to Test PyPI
  workflow_dispatch:        # manual run

permissions:
  contents: write        # push tag / create release
  pages: write           # deploy GitHub Pages
  id-token: write        # OIDC (future trusted PyPI)

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

###############################################################################
# 1)  VERIFY LABEL & CALCULATE NEXT VERSION  –– real-release only
###############################################################################
jobs:
  guard-label:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      bump: ${{ steps.bump.outputs.bump }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Determine bump from PR label
        id: bump
        run: |
          sha=$GITHUB_SHA
          pr_number=$(gh api \
              "repos/${{ github.repository }}/commits/$sha/pulls" \
              --jq '.[0].number')
          labels=$(gh pr view "$pr_number" --json labels --jq '.labels[].name')
          bump=""
          [[ $labels == *"release:patch"* ]] && bump="patch"
          [[ $labels == *"release:minor"* ]] && bump="minor"
          [[ $labels == *"release:major"* ]] && bump="major"
          echo "bump=$bump" >> "$GITHUB_OUTPUT"
          [[ -z "$bump" || $(echo "$labels" | grep -c 'release:') -ne 1 ]] && \
            (echo "::error::Exactly one label release:* is required." && exit 1)

  tag-version:
    if: github.event_name == 'push'
    needs: guard-label
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.tag.outputs.new_tag }}

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Bump version and push tag
        id: tag
        env:
          BUMP: ${{ needs.guard-label.outputs.bump }}
        run: |
          latest=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          ver=${latest#v}; IFS='.' read -r major minor patch <<<"$ver"
          case "$BUMP" in
            patch) patch=$((patch+1));;
            minor) minor=$((minor+1)); patch=0;;
            major) major=$((major+1)); minor=0; patch=0;;
          esac
          new_tag="v${major}.${minor}.${patch}"
          echo "new_tag=$new_tag" >>"$GITHUB_OUTPUT"
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$new_tag"; git push origin "$new_tag"

  ###############################################################################
  # 2)  REAL RELEASE –– push → main
  ###############################################################################
  publish:
    if: github.event_name == 'push'
    needs: tag-version
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.tag-version.outputs.new_tag }}

      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - run: python -m pip install --upgrade pip uv nox twine

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with: { virtualenvs-create: false }

      - run: poetry self add poetry-dynamic-versioning

      - name: Smoke tests
        run: nox -s smoke

      - name: Build & upload to PyPI
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry build
          python -m twine upload --non-interactive --skip-existing \
            -u __token__ -p "$TWINE_PASSWORD" dist/*

      # ── Docs ──────────────────────────────────────────────
      - run: nox -s docs
      - uses: actions/upload-pages-artifact@v3
        with: { path: site }
      - uses: actions/deploy-pages@v4

      # ── GitHub Release page ──────────────────────────────
      - name: Draft GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.tag-version.outputs.new_tag }}
          name: Release ${{ needs.tag-version.outputs.new_tag }}

  ###############################################################################
  # 3)  DRY-RUN (Test PyPI) –– every PR → main
  ###############################################################################
  test-publish:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - run: python -m pip install --upgrade pip uv nox twine

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with: { virtualenvs-create: false }

      - run: poetry self add poetry-dynamic-versioning

      # ╭───────────────────────────────╮
      # │  give the package a throw-away│
      # │  dev version so Test PyPI     │
      # │  accepts multiple uploads     │
      # ╰───────────────────────────────╯
      - name: Bump to scratch dev-version
        run: poetry version "$(date +%s).dev${{ github.run_number }}"

      - name: Build & upload to **Test PyPI**
        env:
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          poetry build
          python -m twine upload --non-interactive --skip-existing \
            --repository-url https://test.pypi.org/legacy/ \
            -u __token__ -p "$TWINE_PASSWORD" dist/*

      - name: Smoke tests
        run: nox -s smoke
