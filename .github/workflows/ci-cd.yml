name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13" ]

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full Git history for versioning

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry with Dynamic Versioning
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry self add poetry-dynamic-versioning

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies with Dynamic Versioning
        run: poetry install --no-interaction

      - name: Run style checks
        run: |
          poetry run black . --check
          poetry run isort . --check
          poetry run ruff check .

      - name: Run type checks
        run: poetry run mypy .

      - name: Run security checks
        run: poetry run bandit -r fmp_data

      - name: Run tests with coverage
        run: poetry run pytest --cov=fmp_data --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          files: ./coverage.xml

  publish-test:
    name: Publish to TestPyPI
    needs: test
    if: success()
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry with Dynamic Versioning
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry self add poetry-dynamic-versioning

      - name: Clean build artifacts
        run: rm -rf dist/ build/ *.egg-info

      - name: Build package
        run: poetry build

      - name: Debug - Verify build artifacts
        run: |
          echo "Listing dist directory:"
          ls -al dist/ || echo "dist directory not found"

      - name: Publish to TestPyPI
        env:
          TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          poetry config pypi-token.testpypi $TEST_PYPI_TOKEN
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry publish -r testpypi --skip-existing --build

      - name: Verify package installation
        run: |
          python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ fmp-data
          python -c "import fmp_data; print(fmp_data.__version__)"

  publish-prod:
    name: Publish to PyPI
    needs: [ test, publish-test ]
    if: |
      success() &&
      startsWith(github.ref, 'refs/tags/') &&
      !contains(github.ref, 'alpha') &&
      !contains(github.ref, 'beta')
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry with Dynamic Versioning
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry self add poetry-dynamic-versioning

      - name: Clean build artifacts
        run: rm -rf dist/ build/ *.egg-info

      - name: Build package
        run: poetry build

      - name: Debug - Verify build artifacts
        run: |
          echo "Listing dist directory:"
          ls -al dist/ || echo "dist directory not found"

      - name: Publish to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish --skip-existing --build

  create-release:
    name: Create GitHub Release
    needs: [ publish-prod ]  # Run after successful PyPI publish
    if: startsWith(github.ref, 'refs/tags/')  # Only run for tags
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed for creating releases

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: release_notes
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --pretty=format:"* %s" --no-merges)
          else
            COMMITS=$(git log --pretty=format:"* %s" --no-merges $PREVIOUS_TAG..HEAD)
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: ${{ contains(github.ref, '-alpha') || contains(github.ref, '-beta') }}
          body: |
            ## What's Changed
            ${{ steps.release_notes.outputs.CHANGELOG }}

            ## Installation
            ```bash
            pip install fmp-data==${{ steps.get_version.outputs.VERSION }}
            ```

            For development version:
            ```bash
            pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ fmp-data
            ```
