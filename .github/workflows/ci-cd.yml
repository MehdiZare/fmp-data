name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Ensure full Git history for versioning

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry with Dynamic Versioning
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        poetry self add poetry-dynamic-versioning

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies with Dynamic Versioning
      run: poetry install --no-interaction

    - name: Run style checks
      run: |
        poetry run black . --check
        poetry run isort . --check
        poetry run ruff check .

    - name: Run type checks
      run: poetry run mypy .

    - name: Run security checks
      run: poetry run bandit -r fmp_data

    - name: Run tests with coverage
      run: poetry run pytest --cov=fmp_data --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
        files: ./coverage.xml

  publish-test:
    name: Publish to TestPyPI
    needs: test
    # Run this job after successful tests
    if: success()
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry with Dynamic Versioning
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry self add poetry-dynamic-versioning

      - name: Clean build artifacts
        run: |
          rm -rf dist/ build/ *.egg-info

      - name: Build package
        run: poetry build

      - name: Publish to TestPyPI
        env:
          POETRY_PYPI_TOKEN_TESTPYPI: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry publish -r testpypi

  publish-prod:
    name: Publish to PyPI
    needs: [test, publish-test]
    # Run this job only on tagged versions that don't contain 'alpha' or 'beta'
    if: |
      success() &&
      startsWith(github.ref, 'refs/tags/') &&
      !contains(github.ref, 'alpha') &&
      !contains(github.ref, 'beta')
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry with Dynamic Versioning
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry self add poetry-dynamic-versioning

      - name: Clean build artifacts
        run: |
          rm -rf dist/ build/ *.egg-info

      - name: Build package
        run: poetry build

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $POETRY_PYPI_TOKEN_PYPI
          poetry publish
