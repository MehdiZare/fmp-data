[tool.poetry]
name = "fmp-data"
version = "0.0.0"  # Managed by poetry-dynamic-versioning
description = "Python client for Financial Modeling Prep API"
authors = ["mehdizare <mehdizare@users.noreply.github.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/MehdiZare/fmp-data"
repository = "https://github.com/MehdiZare/fmp-data"
documentation = "https://github.com/MehdiZare/fmp-data#readme"
keywords = ["fmp", "financial", "api", "stocks", "market-data", "python", "finance"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Financial :: Investment",
    "Framework :: AsyncIO",
]
packages = [{ include = "fmp_data" }]
include = ["fmp_data/py.typed"]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/MehdiZare/fmp-data/issues"
"Changelog" = "https://github.com/MehdiZare/fmp-data/blob/main/CHANGELOG.md"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
httpx = "^0.28.1"
pydantic = "^2.9.2"
pydantic-settings = "^2.6.0"
python-dotenv = "^1.0.1"
tenacity = "^9.0.0"
tqdm = "^4.66.5"
cachetools = "^6.1.0"
structlog = "^25.4.0"
pandas = "^2.2.3"

# Optional dependencies for langchain integration
langchain = { version = "^0.3.13", optional = true }
openai = { version = "^1.58.1", optional = true }
tiktoken = { version = "^0.9.0", optional = true }
langchain-community = { version = "^0.3.13", optional = true }
langchain-openai = { version = "^0.3.13", optional = true }
faiss-cpu = { version = "^1.9.0.post1", optional = true }
langgraph = { version = "^0.4.10", optional = true }

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
pytest-asyncio = "^0.24.0"
pytest-mock = "^3.14.0"
coverage = "^7.6.4"
responses = "^0.25.3"
freezegun = "^1.5.1"
vcrpy = "^6.0.2"

# Code quality
black = "^24.10.0"
isort = "^5.13.2"
ruff = "^0.7.1"
mypy = "^1.13.0"
bandit = "^1.7.10"
pre-commit = "^4.0.1"

# Development tools
rich = "^13.9.3"
twine = "^5.1.1"
poetry-dynamic-versioning = "^1.4.1"
types-cachetools = "^5.5.0.20240820"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.1"
mkdocs-material = "^9.5.42"
mkdocstrings-python = "^1.12.2"

[tool.poetry.extras]
langchain = [
    "langchain",
    "openai",
    "tiktoken",
    "langchain-community",
    "langchain-openai",
    "faiss-cpu",
    "langgraph"
]

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"
metadata = false
pattern = "v(?P<base>\\d+\\.\\d+\\.\\d+)(?:-(?P<stage>beta|alpha))?(?:\\.(?P<rev>\\d+))?"
format-jinja = """
{%- if distance == 0 -%}
    {{base}}
{%- else -%}
    {{base}}.post{{distance}}+{{rev}}
{%- endif -%}
"""

[tool.poetry-dynamic-versioning.substitution]
folders = [{ path = "fmp_data" }]

# Development tools configuration
[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312", "py313"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["fmp_data"]

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # bandit security
]
ignore = ["S101"]  # Allow assert statements

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S603", "S607"]
"scripts/*" = ["S603", "S607"]
"**/conftest.py" = ["S101"]
"**/__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
exclude = ["tests/", "examples/", "scripts/"]
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "vcr.*",
    "responses.*",
    "freezegun.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-config",
    "--strict-markers",
    "--disable-warnings",
    "-v"
]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]
markers = [
    "integration: marks tests as integration tests (require API key)",
    "slow: marks tests as slow running",
]

[tool.coverage.run]
source = ["fmp_data"]
branch = true
omit = [
    "fmp_data/endpoints/definitions.py",
    "fmp_data/example.py",
    "*/__init__.py",
    "tests/*",
    "*/tests/*",
    "setup.py",
    "scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "except ImportError",
    "def main()",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
fail_under = 80
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
exclude_dirs = ["tests", "scripts", "examples"]
skips = ["B101", "B404", "B603", "B607"]
