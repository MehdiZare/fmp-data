###############################################################################
#  Core project metadata (PEP 621)                                            #
###############################################################################
[project]
name = "fmp-data"
description = "Python client for the Financial Modeling Prep API"
readme = "README.md"
requires-python = ">=3.10,<4.0"
license = { text = "MIT" }
dynamic = ["version"]

authors = [
  { name = "Mehdi Zare", email = "mehdizare@users.noreply.github.com" },
]
maintainers = [
  { name = "Mehdi Zare", email = "mehdizare@users.noreply.github.com" },
]

keywords = [
  "fmp", "financial", "api", "stocks", "market-data",
  "stock market", "financial data",
]

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Financial and Insurance Industry",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Framework :: AsyncIO",
]

###############################################################################
#  Runtime dependencies - Core functionality only                             #
###############################################################################
dependencies = [
  "httpx>=0.28.1",
  "pydantic>=2.11.7,<3.0.0",
  "pydantic-settings>=2.6.0",
  "python-dotenv>=1.1.1,<2.0.0",
  "tenacity>=9.0.0",
  "tqdm>=4.66.5",
  "cachetools>=6.1.0",
  "structlog>=25.4.0",
  "pandas>=2.3.0,<3.0.0",
]

###############################################################################
#  Command-line entry points                                                  #
###############################################################################
[project.scripts]
fmp = "fmp_data.scripts.dev:main"
fmp-mcp = "fmp_data.mcp.server:main"
fmp-mcp-dev = "fmp_data.scripts.dev_server:main"

###############################################################################
#  Project links                                                              #
###############################################################################
[project.urls]
Homepage = "https://github.com/MehdiZare/fmp-data"
Documentation = "https://github.com/MehdiZare/fmp-data#readme"
Source = "https://github.com/MehdiZare/fmp-data"
Issues = "https://github.com/MehdiZare/fmp-data/issues"

###############################################################################
#  Build system                                                               #
###############################################################################
[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

###############################################################################
#  Poetry minimal config (only for dynamic versioning)                       #
###############################################################################
[tool.poetry]
name = "fmp-data"
version = "0.0.0"  # Overridden by dynamic versioning
description = "Python client for the Financial Modeling Prep API"
authors = ["Mehdi Zare <mehdizare@users.noreply.github.com>"]
readme = "README.md"
packages = [{include = "fmp_data"}]

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"
format-jinja = """
{%- if distance == 0 -%}
{{ base }}
{%- else -%}
{{ base }}.post{{ distance }}
{%- endif -%}
"""

[tool.poetry-dynamic-versioning.substitution]
files = ["fmp_data/__init__.py"]

###############################################################################
#  PEP 735 Dependency Groups - EVERYTHING as dependency groups               #
###############################################################################
[dependency-groups]
# ═══════════════════════════════════════════════════════════════════════════
# User Features (what end users install for additional functionality)
# ═══════════════════════════════════════════════════════════════════════════

# LangChain AI integration
langchain = [
  "faiss-cpu>=1.11.0",
  "langchain-core>=0.3.66",
  "langchain-community>=0.3.26",
  "langchain-openai>=0.3.25",
  "langgraph>=0.4.10",
  "openai>=1.92.0",
  "tiktoken>=0.9.0",
]

# Model Context Protocol server
mcp-server = [
  "mcp[cli]>=1.0.0",
  "pyyaml>=6.0.1",
]

# All user features combined (convenience group)
all-features = [
  {include-group = "langchain"},
  {include-group = "mcp-server"},
]

# ═══════════════════════════════════════════════════════════════════════════
# Development Dependencies (what developers need)
# ═══════════════════════════════════════════════════════════════════════════

# Complete development environment
dev = [
  # Dynamic versioning (Poetry-specific)
  "poetry-dynamic-versioning>=1.4.1",

  # Include all dev sub-groups
  {include-group = "lint"},
  {include-group = "test"},
  {include-group = "docs"},

  # Additional dev utilities
  "pre-commit>=4.0.1",
  "rich>=13.9.3",
  "twine>=5.1.1",
  "nox>=2024.4.15",
]

# Linting and formatting tools
lint = [
  "ruff>=0.7.1",
  "black>=24.10.0",
  "isort>=5.13.2",
  "mypy>=1.13.0",
  "types-cachetools>=6.0.0.20250525",
  "bandit[toml]>=1.7.10",
]

# Testing tools
test = [
  "pytest>=8.3.3",
  "pytest-asyncio>=0.24.0",
  "pytest-cov>=6.0.0",
  "pytest-mock>=3.14.0",
  "freezegun>=1.5.1",
  "responses>=0.25.3",
  "vcrpy>=6.0.2",
  "coverage>=7.6.4",
]

# Documentation tools
docs = [
  "mkdocs>=1.6.1",
  "mkdocs-material>=9.6.14",
  "mkdocstrings-python>=1.16.12",
]

# ═══════════════════════════════════════════════════════════════════════════
# Specialized Groups (for CI/CD and specific workflows)
# ═══════════════════════════════════════════════════════════════════════════

# Minimal testing (for fast CI)
ci-test = [
  "pytest>=8.3.3",
  "pytest-cov>=6.0.0",
  "coverage>=7.6.4",
]

# Minimal linting (for fast CI)
ci-lint = [
  "ruff>=0.7.1",
  "mypy>=1.13.0",
  "types-cachetools>=6.0.0.20250525",
]

# Local development (dev without heavy deps)
local = [
  "poetry-dynamic-versioning>=1.4.1",
  {include-group = "ci-lint"},
  {include-group = "ci-test"},
  "pre-commit>=4.0.1",
  "rich>=13.9.3",
  "nox>=2024.4.15",
]

###############################################################################
#  Tool configuration                                                         #
###############################################################################
[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312", "py313"]
include = "\\.pyi?$"

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = ["E", "W", "F", "I", "C", "B", "S", "UP"]
ignore = ["S101"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
"scripts/*" = ["S603", "S607"]
"**/conftest.py" = ["S101"]
"__init__.py" = ["F401"]
"noxfile.py" = ["S603", "S607"]

[tool.ruff.lint.isort]
known-first-party = ["fmp_data"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
exclude = ["tests/", "examples/", "scripts/"]
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
  "vcr.*",
  "langchain.*",
  "langchain_core.*",
  "langchain_community.*",
  "langchain_openai.*",
  "langgraph.*",
  "faiss",
  "faiss.*",
  "mcp",
  "mcp.*",
  "tiktoken.*",
  "openai.*",
  "yaml.*",
  "rich.*",
  "tqdm.*",
  "pandas.*",
  "responses.*",
  "freezegun.*",
  "structlog.*",
  "tenacity.*",
  "fmp_data._version",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "fmp_data.__init__"
disable_error_code = ["import-untyped", "no-any-return", "attr-defined"]

[[tool.mypy.overrides]]
module = "fmp_data.lc.*"
disable_error_code = ["import-untyped"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "fmp_data.mcp.*"
disable_error_code = ["import-untyped"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--quiet --no-header --tb=short -v --disable-warnings"
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
]

[tool.coverage.run]
source = ["fmp_data"]
branch = true
omit = [
  "fmp_data/endpoints/definitions.py",
  "fmp_data/example.py",
  "*/__init__.py",
  "tests/*",
  "*/tests/*",
  "setup.py",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise NotImplementedError",
  "if __name__ == '__main__':",
  "pass",
  "raise ImportError",
  "except ImportError",
  "def main()",
  "if TYPE_CHECKING:",
]
show_missing = true
fail_under = 80

[tool.coverage.html]
directory = "coverage_html"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
exclude_dirs = ["tests", "scripts", ".nox", ".venv"]
skips = ["B101", "B404", "B603", "B607", "B608"]
