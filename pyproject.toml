[project]
name = "fmp-data"
dynamic = ["version"]
description = "Python client for the Financial Modeling Prep API"
authors = [
    {name = "Mehdi Zare", email = "mehdizare@users.noreply.github.com"}
]
readme = "README.md"
license = {text = "MIT"}
keywords = ["finance", "api", "financial-modeling-prep", "stocks", "market-data"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Financial",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = ">=3.10"

# Core dependencies - minimal for basic functionality
dependencies = [
    "httpx>=0.27.0",
    "pydantic>=2.10.3",
    "cachetools>=5.5.0",
    "tenacity>=9.0.0",
    "structlog>=24.4.0",
    "pydantic-settings>=2.6.1",
]

[project.optional-dependencies]
# Keep these for backward compatibility, but map to dependency groups
langchain = [
    "faiss-cpu>=1.11.0",
    "langchain-core>=0.3.66",
    "langchain-community>=0.3.26",
    "langchain-openai>=0.3.25",
    "langgraph>=0.4.10",
    "openai>=1.92.0",
    "tiktoken>=0.9.0",
]
mcp-server = [
    "mcp[cli]>=1.0.0",
    "pyyaml>=6.0.1",
]

[project.scripts]
fmp-dev-server = "fmp_data.scripts.dev_server:main"

[project.urls]
Homepage = "https://github.com/MehdiZare/fmp-data"
Documentation = "https://github.com/MehdiZare/fmp-data#readme"
Source = "https://github.com/MehdiZare/fmp-data"
Issues = "https://github.com/MehdiZare/fmp-data/issues"

###############################################################################
#  PEP 735 Dependency Groups                                                  #
###############################################################################
[dependency-groups]
# User-facing feature groups
langchain = [
    "faiss-cpu>=1.11.0",
    "langchain-core>=0.3.66",
    "langchain-community>=0.3.26",
    "langchain-openai>=0.3.25",
    "langgraph>=0.4.10",
    "openai>=1.92.0",
    "tiktoken>=0.9.0",
]

mcp-server = [
    "mcp[cli]>=1.0.0",
    "pyyaml>=6.0.1",
]

# Development groups
test = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "freezegun>=1.5.1",
    "responses>=0.25.3",
    "vcrpy>=6.0.2",
    "coverage>=7.6.4",
]

lint = [
    "ruff>=0.7.1",
    "black>=24.10.0",
    "isort>=5.13.2",
    "mypy>=1.13.0",
    "types-cachetools>=6.0.0.20250525",
    "bandit[toml]>=1.7.10",
]

docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.14",
    "mkdocstrings-python>=1.16.12",
]

# Combined groups for convenience
dev = [
    {include-group = "test"},
    {include-group = "lint"},
    {include-group = "docs"},
    "pre-commit>=4.0.1",
    "rich>=13.9.3",
    "nox>=2024.4.15",
]

all-features = [
    {include-group = "langchain"},
    {include-group = "mcp-server"},
]

# CI-specific minimal groups
ci-test = [
    "pytest>=8.3.3",
    "pytest-cov>=6.0.0",
    "coverage>=7.6.4",
]

ci-lint = [
    "ruff>=0.7.1",
    "mypy>=1.13.0",
    "types-cachetools>=6.0.0.20250525",
]

###############################################################################
#  Build system                                                               #
###############################################################################
[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

###############################################################################
#  Poetry config (minimal, only for dynamic versioning)                      #
###############################################################################
[tool.poetry]
name = "fmp-data"
version = "0.0.0"  # Overridden by dynamic versioning
description = "Python client for the Financial Modeling Prep API"
authors = ["Mehdi Zare <mehdizare@users.noreply.github.com>"]
readme = "README.md"
packages = [{include = "fmp_data"}]

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"
format-jinja = """
{%- if distance == 0 -%}
{{ base }}
{%- else -%}
{{ base }}.post{{ distance }}
{%- endif -%}
"""

[tool.poetry-dynamic-versioning.substitution]
files = ["fmp_data/__init__.py"]

###############################################################################
#  Tool configuration                                                         #
###############################################################################
[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312", "py313"]
include = "\\.pyi?$"

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = ["E", "W", "F", "I", "C", "B", "S", "UP"]
ignore = ["S101"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
"scripts/*" = ["S603", "S607"]
"**/conftest.py" = ["S101"]
"__init__.py" = ["F401"]
"noxfile.py" = ["S603", "S607"]

[tool.ruff.lint.isort]
known-first-party = ["fmp_data"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
exclude = ["tests/", "examples/", "scripts/"]
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "vcr.*",
    "langchain.*",
    "langchain_core.*",
    "langchain_community.*",
    "langchain_openai.*",
    "langgraph.*",
    "faiss",
    "faiss.*",
    "mcp",
    "mcp.*",
    "tiktoken.*",
    "openai.*",
    "yaml.*",
    "rich.*",
    "tqdm.*",
    "pandas.*",
    "responses.*",
    "freezegun.*",
    "structlog.*",
    "tenacity.*",
    "fmp_data._version",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "fmp_data.__init__"
disable_error_code = ["import-untyped", "no-any-return", "attr-defined"]

[[tool.mypy.overrides]]
module = "fmp_data.lc.*"
disable_error_code = ["import-untyped"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "fmp_data.mcp.*"
disable_error_code = ["import-untyped"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=fmp_data",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "integration: marks tests as integration tests (may require API keys)",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["fmp_data"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/__pycache__/*",
    "*/scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "examples", "scripts"]
skips = ["B101"]
