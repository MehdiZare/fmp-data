[project]
name = "fmp-data"
version = "0.3.1"
description = "Python client for Financial Modeling Prep API"
authors = [
    {name = "mehdizare", email = "mehdizare@users.noreply.github.com"}
]
maintainers = [
    {name = "mehdizare", email = "mehdizare@users.noreply.github.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10,<4.0"
keywords = [
    "fmp", "financial", "api", "stocks", "market-data",
    "stock market", "financial data"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "License :: OSI Approved :: Apache Software License",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Financial :: Investment",
    "Framework :: AsyncIO"
]

dependencies = [
    "httpx (>=0.28.1)",
    "pydantic (>=2.11.7,<3.0.0)",
    "pydantic-settings>=2.6.0",
    "python-dotenv (>=1.1.1,<2.0.0)",
    "tenacity>=9.0.0",
    "tqdm>=4.66.5",
    "cachetools>=6.1.0",
    "types-cachetools>=6.0.0.20250525",
    "structlog>=25.4.0",
    "pandas (>=2.3.0,<3.0.0)",
]

[project.optional-dependencies]
langchain = [
    "faiss-cpu>=1.11.0",
    "langchain-core>=0.3.66",
    "langchain-community>=0.3.26",
    "langchain-openai>=0.3.25",
    "langgraph>=0.4.10",
    "openai>=1.92.0",
    "tiktoken>=0.9.0",
]
mcp-server = [
    "mcp[cli]>=1.0.0",
    "pyyaml>=6.0.1",
]
test = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "freezegun>=1.5.1",
    "responses>=0.25.3",
    "vcrpy>=6.0.2",
    "coverage>=7.6.4",
    "black>=24.10.0",
    "isort>=5.13.2",
    "ruff>=0.7.1",
    "mypy>=1.13.0",
    "bandit>=1.7.10",
    "rich>=13.9.3",
    "pre-commit>=4.0.1",
    "twine>=5.1.1",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.42",
    "mkdocstrings-python>=1.12.2",
]
doc = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.14",
    "mkdocstrings-python>=1.16.12",
]

[project.urls]
Homepage = "https://github.com/MehdiZare/fmp-data"
Repository = "https://github.com/MehdiZare/fmp-data"
Documentation = "https://github.com/MehdiZare/fmp-data#readme"
"Bug Tracker" = "https://github.com/MehdiZare/fmp-data/issues"

[project.scripts]
format = "scripts:format_code"
lint = "scripts:lint"
typecheck = "scripts:typecheck"
test = "scripts:test"
security = "scripts:security_check"
fmp = "fmp_data.scripts.dev:main"
fmp-mcp = "fmp_data.mcp.server:main"
fmp-mcp-dev = "fmp_data.scripts.dev_server:main"
mkdocstrings-python = "mkdocstrings.cli:main"

# ───────────────────────────────  Build-system  ──────────────────────────────
[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"
pattern = "v(?P<base>\\d+\\.\\d+\\.\\d+)(?:-(?P<stage>beta|alpha))?(?:\\.(?P<rev>\\d+))?"
format-jinja = """
{%- if distance == 0 -%}
    {{base}}
{%- else -%}
    {{base}}.post{{distance}}
{%- endif -%}
"""

[tool.hatch.build.targets.wheel]
packages = ["fmp_data"]
include = [
    "fmp_data/py.typed",
]

# ──────────  Formatting / linting / static configs  ──────────

[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312", "py313"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
exclude = ["tests/", "examples/"]
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "vcr.*",
    "langchain.*",
    "langchain_core.*",
    "langchain_community.*",
    "langchain_openai.*",
    "faiss",
    "faiss.*",
    "mcp",
    "mcp.*",
]

ignore_missing_imports = true

[tool.pydocstyle]
convention = "google"
add-select = ["D100", "D101", "D102", "D103", "D104"]
add-ignore = ["D105", "D107", "D200", "D203", "D213", "D406", "D407"]
ignore-decorators = "overrides"

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = ["E", "W", "F", "I", "C", "B", "S", "UP"]
ignore = ["S101"]                               # allow assert in tests
[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
"scripts/*" = ["S603", "S607"]
"**/conftest.py" = ["S101"]
"__init__.py" = ["F401"]


[tool.ruff.lint.isort]
known-first-party = ["fmp_data"]

# ------------------------  Pytest defaults  ------------------------

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--quiet --no-header --tb=short -v --disable-warnings"
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

# ------------------------  Coverage config  ------------------------

[tool.coverage.run]
source = ["fmp_data"]
branch = true
omit = [
    "fmp_data/endpoints/definitions.py",
    "fmp_data/example.py",
    "*/__init__.py",
    "tests/*",
    "*/tests/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == '__main__':",
    "pass",
    "raise ImportError",
    "except ImportError",
    "def main()",
    "if TYPE_CHECKING:",
]
show_missing = true
fail_under = 80

[tool.coverage.html]
directory = "coverage_html"

[tool.coverage.xml]
output = "coverage.xml"

# ------------------------  Bandit security  ------------------------

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B404", "B603", "B607"]
