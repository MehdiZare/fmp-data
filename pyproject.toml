###############################################################################
#  Core project metadata (PEP 621) - Compatible with both Poetry and uv     #
###############################################################################
[project]
name = "fmp-data"
description = "Python client for the Financial Modeling Prep API"
readme = "README.md"
requires-python = ">=3.10,<4.0"
license = { text = "MIT" }
dynamic = ["version"]

authors = [
  { name = "Mehdi Zare", email = "mehdizare@users.noreply.github.com" },
]
maintainers = [
  { name = "Mehdi Zare", email = "mehdizare@users.noreply.github.com" },
]

keywords = [
  "fmp", "financial", "api", "stocks", "market-data",
  "stock market", "financial data",
]

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Financial and Insurance Industry",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Framework :: AsyncIO",
]

###############################################################################
#  Runtime dependencies                                                       #
###############################################################################
dependencies = [
  "httpx>=0.28.1",
  "pydantic>=2.11.7,<3.0.0",
  "pydantic-settings>=2.6.0",
  "python-dotenv>=1.1.1,<2.0.0",
  "tenacity>=9.0.0",
  "tqdm>=4.66.5",
  "cachetools>=6.1.0",
  "structlog>=25.4.0",
  "pandas>=2.3.0,<3.0.0",
]

###############################################################################
#  Optional runtime features (extras)                                         #
###############################################################################
[project.optional-dependencies]

# ——— LangChain integration ———
langchain = [
  "faiss-cpu>=1.11.0",
  "langchain-core>=0.3.66",
  "langchain-community>=0.3.26",
  "langchain-openai>=0.3.25",
  "langgraph>=0.4.10",
  "openai>=1.92.0",
  "tiktoken>=0.9.0",
]

# ——— Run an MCP server alongside the client ———
mcp-server = [
  "mcp[cli]>=1.0.0",
  "pyyaml>=6.0.1",
]

# ——— Development dependencies (for uv) ———
dev = [
  # Linting / formatting
  "ruff>=0.7.1",
  "black>=24.10.0",
  "isort>=5.13.2",

  # Static typing
  "mypy>=1.13.0",
  "types-cachetools>=6.0.0.20250525",

  # Security
  "bandit[toml]>=1.7.10",

  # Testing
  "pytest>=8.3.3",
  "pytest-asyncio>=0.24.0",
  "pytest-cov>=6.0.0",
  "pytest-mock>=3.14.0",
  "freezegun>=1.5.1",
  "responses>=0.25.3",
  "vcrpy>=6.0.2",
  "coverage>=7.6.4",

  # Dev utilities
  "pre-commit>=4.0.1",
  "rich>=13.9.3",
  "twine>=5.1.1",
  "nox>=2024.4.15",
]

# ——— Documentation dependencies (for uv) ———
docs = [
  "mkdocs>=1.6.1",
  "mkdocs-material>=9.6.14",
  "mkdocstrings-python>=1.16.12",
]

###############################################################################
#  Command-line entry points                                                  #
###############################################################################
[project.scripts]
fmp = "fmp_data.scripts.dev:main"
fmp-mcp = "fmp_data.mcp.server:main"
fmp-mcp-dev = "fmp_data.scripts.dev_server:main"

###############################################################################
#  Project links                                                              #
###############################################################################
[project.urls]
Homepage = "https://github.com/MehdiZare/fmp-data"
Documentation = "https://github.com/MehdiZare/fmp-data#readme"
Source = "https://github.com/MehdiZare/fmp-data"
Issues = "https://github.com/MehdiZare/fmp-data/issues"

###############################################################################
#  Build system - Dual compatibility                                          #
###############################################################################
[build-system]
# Primary: Poetry with dynamic versioning (for Poetry users)
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

###############################################################################
#  Poetry configuration (for Poetry users)                                   #
###############################################################################
[tool.poetry]
name = "fmp-data"
version = "0.0.0"  # This gets overridden by dynamic versioning
description = "Python client for the Financial Modeling Prep API"
authors = ["Mehdi Zare <mehdizare@users.noreply.github.com>"]
readme = "README.md"
packages = [{include = "fmp_data"}]

###############################################################################
#  Poetry Dynamic Versioning                                                  #
###############################################################################
[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"
format-jinja = """
{%- if distance == 0 -%}
{{ base }}
{%- else -%}
{{ base }}.post{{ distance }}
{%- endif -%}
"""

[tool.poetry-dynamic-versioning.substitution]
files = ["fmp_data/__init__.py"]

###############################################################################
#  Poetry dependency groups (for Poetry users)                               #
###############################################################################
[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
# Dynamic versioning
poetry-dynamic-versioning = "^1.4.1"

# Linting / formatting
ruff = "^0.7.1"
black = "^24.10.0"
isort = "^5.13.2"

# Static typing
mypy = "^1.13.0"
types-cachetools = "^6.0.0.20250525"

# Security
bandit = { version = "^1.7.10", extras = ["toml"] }

# Testing
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
pytest-cov = "^6.0.0"
pytest-mock = "^3.14.0"
freezegun = "^1.5.1"
responses = "^0.25.3"
vcrpy = "^6.0.2"
coverage = "^7.6.4"

# Dev utilities
pre-commit = "^4.0.1"
rich = "^13.9.3"
twine = "^5.1.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.1"
mkdocs-material = "^9.6.14"
mkdocstrings-python = "^1.16.12"

###############################################################################
#  Alternative build system for uv (commented out)                           #
###############################################################################
# Uncomment this section and comment out the Poetry build-system above
# if you want to use setuptools-scm with uv exclusively:
#
# [build-system]
# requires = ["setuptools>=64", "setuptools-scm>=8"]
# build-backend = "setuptools.build_meta"
#
# [tool.setuptools-scm]
# version_scheme = "post-release"
# local_scheme = "no-local-version"
# write_to = "fmp_data/_version.py"
# fallback_version = "0.0.0"

###############################################################################
#  Shared tool configuration (works with both Poetry and uv)                 #
###############################################################################
[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312", "py313"]
include = "\\.pyi?$"

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = ["E", "W", "F", "I", "C", "B", "S", "UP"]
ignore = ["S101"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
"scripts/*" = ["S603", "S607"]
"**/conftest.py" = ["S101"]
"__init__.py" = ["F401"]
"noxfile.py" = ["S603", "S607"]  # Allow subprocess calls for tool management

[tool.ruff.lint.isort]
known-first-party = ["fmp_data"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
exclude = ["tests/", "examples/"]
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
  "vcr.*",
  "langchain.*",
  "langchain_core.*",
  "langchain_community.*",
  "langchain_openai.*",
  "faiss",
  "faiss.*",
  "mcp",
  "mcp.*",
]
ignore_missing_imports = true

[tool.pydocstyle]
convention = "google"
add-select = ["D100", "D101", "D102", "D103", "D104"]
add-ignore = ["D105", "D107", "D200", "D203", "D213", "D406", "D407"]
ignore-decorators = "overrides"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--quiet --no-header --tb=short -v --disable-warnings"
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
]

[tool.coverage.run]
source = ["fmp_data"]
branch = true
omit = [
  "fmp_data/endpoints/definitions.py",
  "fmp_data/example.py",
  "*/__init__.py",
  "tests/*",
  "*/tests/*",
  "setup.py",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise NotImplementedError",
  "if __name__ == '__main__':",
  "pass",
  "raise ImportError",
  "except ImportError",
  "def main()",
  "if TYPE_CHECKING:",
]
show_missing = true
fail_under = 80

[tool.coverage.html]
directory = "coverage_html"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B404", "B603", "B607"]
